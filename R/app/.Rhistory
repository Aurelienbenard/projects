is.na(ts_data)
sum(is.na(ts_data))
knitr::opts_chunk$set(echo = TRUE)
n = seq(1,15)
r = 0.115
P = 5000
Output = P*(1+r/100)^n
Output
height = (c(180,165,160,193))/100
weight = c(87,58,65,100)
BMI = weight/(height^2)
BMI
height > 1.82
data(cars)
head(cars,5)
set.seed(0)
state = sample(c('NY','CA','CT'),nrow(cars),replace = T)
newcars = cbind(cars,state)
newcars
ratio = cars$dist/cars$speed
ratio
AverageRatio = mean(ratio)
AverageRatio
SDRatio = sd(ratio)
SDRatio
ts_data[!complete.cases(ts_data),]
View(ts_data)
ts_data[1][MissingRow]
MissingRow = ts_data[!complete.cases(ts_data),]
ts_data[1][MissingRow]
ts_data[1]
ts_data[1,MissingRow]
ts_data(1,2)
ts_data[1,1]
class(MissingRow)
MissingRow = as.vector(ts_data[!complete.cases(ts_data),])
class(MissingRow)
View(MissingRow)
MissingRow = ts_data[!complete.cases(ts_data),]
MissingRow = ts_data[!complete.cases(ts_data),][1]
MissingColumns = ts_data[,!complete.cases(ts_data)]
ts_data[,!complete.cases(ts_data)]
sapply(ts_data,is.na)
sum(sapply(ts_data,is.na))
sapply(ts_data,sum(is.na))
sum(is.na(ts_data$col))
sapply(ts_data$col,is.na)
sapply(ts_data, function(y) sum(length(which(is.na(y)))))
colSums(is.na(ts_data))
summary(ts_data)
rowSums(is.na(ts_data))
ts_data$Location = 'Upper Bway'
ts_data$Location == 'Upper Bway'
ts_data = read.csv('https://s3.amazonaws.com/graderdata/TimesSquareSignage.csv', stringsAsFactors=FALSE)
View(ts_data)
ts_data$Location == 'Upper Bway'
ts_data[ts_data$Location=='Upper Bway',]
ts_data[ts_data$Location=='Upper Bway',]
cd
UB = ts_data[ts_data$Location=='Upper Bway',]
write.table(UB, file = 'UpperBway.csv',sep = ',',row.names = F)
names(ts_data)
SingleSF = ts_data$TOTAL.SF/ts_data$TOTAL
temp = cbind(ts_data,SingleSF)
SF = ts_data[temp$SingleSF>mean(SingleSF),]
View(SF)
write.csv(SF,file = 'SF.csv',row.names=F)
ts_data[order(ts_data$TOTAL.SF),]
UB = ts_data[ts_data$Location=='Upper Bway',]
write.table(UB, file = 'UpperBway.csv',sep = ',',row.names = F)
SingleSF = ts_data$TOTAL.SF/ts_data$TOTAL
temp = cbind(ts_data,SingleSF)
SF = ts_data[temp$SingleSF>mean(SingleSF),]
write.csv(SF,file = 'SF.csv',row.names=F)
ts_data[order(ts_data$TOTAL.SF),]
ts_data[order(ts_data$TOTAL.SF),]
ts_data[order(ts_data$TOTAL.SF),][10,]
ts_data[order(ts_data$TOTAL.SF),][10,]
ts_data[order(ts_data$TOTAL.SF),][,10]
(ts_data[order(ts_data$TOTAL.SF),])[10,]
(ts_data[order(ts_data$TOTAL.SF),])[10,]
(ts_data[order(ts_data$TOTAL.SF),])[,10]
head(ts_data[order(ts_data$TOTAL.SF),],10)
head(ts_data[order(ts_data$TOTAL.SF),],10)
Top10[1:3,]
Top10 = head(ts_data[order(ts_data$TOTAL.SF),],10)
Top10[1:3,]
Top10[1:3,]
Top10[,1:3]
Top10[,1:3]
write.csv(Top10[,1:3],file = TopTen.csv,row.names = F)
write.csv(Top10[,1:3],file = 'TopTen.csv',row.names = F)
mpg %>%
summarise(.,ratioCVE = hwy/displ)
library(dplyr)
mpg %>%
summarise(.,ratioCVE = hwy/displ)
mpg %>%
summarise(.,ratioCVE = hwy/displ)
library(ggplot2)
mpg %>%
summarise(.,ratioCVE = hwy/displ)
data(mpg)
mpg %>%
summarise(.,ratioCVE = hwy/displ)
hwy/displ
mpg %>%
summarise(.,'ratioCVE' = hwy/displ)
mpg %>%
summarise(.,ratioCVE = hwy/displ)
mpg %>%
mutate(.,ratioHVE = hwy/displ)
mpg %>%
mutate(.,ratioHVE = hwy/displ) %>%
mutate(.,ratioCVE = cty/displ)
names(mpg)
mpg %>%
mutate(.,ratioHVE = hwy/displ) %>%
mutate(.,ratioCVE = cty/displ) %>%
group_by(.,year,manufacturer) %>%
summarise(.,mean(ratioHVE),mean(ratioCVE))
mpg %>%
mutate(.,ratioHVE = hwy/displ) %>%
mutate(.,ratioCVE = cty/displ) %>%
group_by(.,year,drv) %>%
summarise(.,max(ratioHVe))
mpg %>%
mutate(.,ratioHVE = hwy/displ) %>%
mutate(.,ratioCVE = cty/displ) %>%
group_by(.,year,drv) %>%
summarise(.,max(ratioHVE))
setwd("~/Desktop/NYCDSA/Week2/")
library(ggplot2)
library(dplyr)
Jobs <- readr::read_csv("./NYC_Jobs.csv")
head(Jobs)
head(Jobs)
names(Jobs)
length(Jobs)
Jobs(1,2)
class(Jobs)
distinct(Jobs$`Salary Frequency`)
unique(Jobs$`Salary Frequency`)
8*5*4*12
5*4*12
elseif (Jobs$`Salary Frequency` == 'Daily'){
else if (Jobs$`Salary Frequency` == 'Daily'){
{Jobs$`Salary Range From` = Jobs$`Salary Range From`*1920 &
Jobs$`Salary Range To`=Jobs$`Salary Range To`*1920} else if (Jobs$`Salary Frequency` == 'Daily'){
{Jobs$`Salary Range From` = Jobs$`Salary Range From`*1920 &
Jobs$`Salary Range To`=Jobs$`Salary Range To`*1920
} else if (Jobs$`Salary Frequency` == 'Daily'){
{Jobs$`Salary Range From` = Jobs$`Salary Range From`*1920 &
Jobs$`Salary Range To`=Jobs$`Salary Range To`*1920
}
Jobs$`Salary Range From`
i = 2
x = 1:2
fib_sum = 0
while (x[i] < 4e6){
if (x[i] %% 2 == 0){
fib_sum = fib_sum + x[i]
}
x[i+1] = x[i] + x[i-1]
i = i + 1
}
fib_sum
# memory-friendly solution
a = 1
b = 2
fib_sum = 0
while (b <4e6){
if (b %% 2 == 0){
fib_sum = fib_sum + b
}
temp = b
b = a + b
a = temp
}
fib_sum
first = 0
second = 1
sum = 0
while (first < 4e6){
num = first + second
first = second
second = num
if (first %% 2 == 0)
{sum = sum + first
}
else{sum = sum}
}
print(sum)
mat_times_vec = function(mat, vec) {
#check if mat is a matrix and vec is a vector
stopifnot(is.matrix(mat), is.numeric(vec), length(vec) > 0, ncol(mat) == length(vec))
#init variables
row_count = nrow(mat)
result =  numeric(row_count)
for(i in 1:row_count) {
result[i] = sum(mat[i,] * vec);
}
return (result)
### better solution
# return(c(mat %*% vec))
}
matrixA = matrix(1:12, 3, 4)
matrixA
vectorB = c(1:4)
mat_times_vec(matrixA, vectorB)
MM <- function(A,x){
for (i in 1:nrow(A))
{tempsum = 0
for (j in 1:ncol(A))
{
temp = A[i,j]*x[j]
tempsum = tempsum + temp
}
vector = append(vector,tempsum)
}
return(vector)
}
matrixA = matrix(1:12, 3, 4)
matrixA
vectorB = c(1:4)
MMM(matrixA,vectorB)
MM <- function(A,x){
for (i in 1:nrow(A))
{tempsum = 0
for (j in 1:ncol(A))
{
temp = A[i,j]*x[j]
tempsum = tempsum + temp
}
vector = append(vector,tempsum)
}
return(vector)
}
matrixA = matrix(1:12, 3, 4)
matrixA
vectorB = c(1:4)
MM(matrixA,vectorB)
Names <- "John Andrew Thomas"
name<-unlist(strsplit(Names,split=' '))
paste(name,"gmail.com",sep="@",collapse = ";")
#sep: a character string to separate the terms.
#collapse: an optional character string to separate the results.
Names <- 'John Andrew Thomas'
splitnames = strsplit(Names, split = ' ')[[1]]
email = paste0(splitnames,'@gmail.com',collapse = ';')
print(email)
MAD <- function(x){
for (i in x){
vector = c()
AbsDiff = abs(i - median(x))
vector = append(vector,AbsDiff)
}
return(median(vector))
}
c(matrixA %*% vectorB)
a = c(1,2,3,4,5)
a - median(a)
cat(a,4)
MAD <- function(x){
for (i in x){
vector = c()
AbsDiff = abs(i - median(x))
vector = cat(vector,AbsDiff)
}
return(median(vector))
}
setwd("~/Desktop/NYCDSA/Week2/")
library(ggplot2)
library(dplyr)
nyc_jobs <- readr::read_csv("./NYC_Jobs.csv")
head(nyc_jobs)
annual = filter(nyc_jobs,Salary.Frequency == 'Annual')
nyc_jobs <- readr::read_csv("./NYC_Jobs.csv")
head(nyc_jobs)
annual = filter(nyc_jobs,`Salary Frequency` == 'Annual')
hourly = filter(nyc_jobs,`Salary Frequency` == 'Hourly')
daily = filter(nyc_jobs,`Salary Frequency` == 'Daily')
setwd("~/Desktop/NYCDSA/Week2/")
library(ggplot2)
library(dplyr)
nyc_jobs <- readr::read_csv("./NYC_Jobs.csv")
head(nyc_jobs)
annual = filter(nyc_jobs,`Salary Frequency` == 'Annual')
hourly = filter(nyc_jobs,`Salary Frequency` == 'Hourly')
daily = filter(nyc_jobs,`Salary Frequency` == 'Daily')
hourly = mutate(hourly,`Salary Range From` = `Salary Range From`*2080, `Salary Range To` = `Salary Range To`*2080)
nyc_jobs$`Salary Range From`
setwd("~/Desktop/NYCDSA/Week2/")
library(ggplot2)
library(dplyr)
nyc_jobs <- readr::read_csv("./NYC_Jobs.csv")
head(nyc_jobs)
nyc_jobs$`Salary Range From`=is.numeric(nyc_jobs$`Salary Range From`)
nyc_jobs$`Salary Range To`=is.numeric(nyc_jobs$`Salary Range To`)
annual = filter(nyc_jobs,`Salary Frequency` == 'Annual')
hourly = filter(nyc_jobs,`Salary Frequency` == 'Hourly')
daily = filter(nyc_jobs,`Salary Frequency` == 'Daily')
hourly = mutate(hourly,`Salary Range From` = `Salary Range From`*2080, `Salary Range To` = `Salary Range To`*2080)
daily = mutate(daily,`Salary Range From` = `Salary Range From`*260, `Salary Range To` = `Salary Range To`*260)
nyc_jobs = rbind(annual,hourly,daily)
names(nyc_jobs)
nyc_jobs %>%
group_by(.,Agency) %>%
summarise(.,mean(`Salary Range From`),median(`Salary Range From`),mean(`Salary Range To`),mean(`Salary Range To`))
nyc_jobs %>%
group_by(.,Agency) %>%
summarise(.,mean(`Salary Range From`),median(`Salary Range From`),mean(`Salary Range To`),median(`Salary Range To`))
compare <- function(s1, s2){
return(ifelse(nchar(s1) == nchar(s2), "Equal Length", "Not Equal Length"))
}
compare("EPS568","Summer")
compare("EPS568","SummerA")
names(nyc_jobs)
nyc_jobs %>%
group_by(.,Agency) %>%
summarise(.,mean(`Salary Range From`))
nyc_jobs %>%
group_by(.,Agency) %>%
summarise(.,Mean = mean(`Salary Range From`)) %>%
arrange(.,desc(Mean))
nyc_jobs$`Salary Range From`
setwd("~/Desktop/NYCDSA/Week2/")
library(ggplot2)
library(dplyr)
nyc_jobs <- readr::read_csv("./NYC_Jobs.csv")
head(nyc_jobs)
nyc_jobs$`Salary Range From`=is.numeric(nyc_jobs$`Salary Range From`)
nyc_jobs$`Salary Range To`=is.numeric(nyc_jobs$`Salary Range To`)
annual = filter(nyc_jobs,`Salary Frequency` == 'Annual')
hourly = filter(nyc_jobs,`Salary Frequency` == 'Hourly')
daily = filter(nyc_jobs,`Salary Frequency` == 'Daily')
hourly = mutate(hourly,`Salary Range From` = `Salary Range From`*2080, `Salary Range To` = `Salary Range To`*2080)
daily = mutate(daily,`Salary Range From` = `Salary Range From`*260, `Salary Range To` = `Salary Range To`*260)
nyc_jobs = rbind(annual,hourly,daily)
nyc_jobs %>%
group_by(.,Agency) %>%
summarise(.,mean(`Salary Range From`),median(`Salary Range From`),mean(`Salary Range To`),median(`Salary Range To`))
nyc_jobs %>%
group_by(.,Agency) %>%
summarise(.,Mean = mean(`Salary Range From`)) %>%
arrange(.,desc(Mean))
class(nyc_jobs$`Salary Range From`)
nyc_jobs <- readr::read_csv("./NYC_Jobs.csv")
head(nyc_jobs)
class(nyc_jobs$`Salary Range From`)
as.numeric(as.character(nyc_jobs$`Salary Range From`))
nyc_jobs$`Salary Range From`=as.numeric(nyc_jobs$`Salary Range From`)
nyc_jobs$`Salary Range To`=as.numeric(nyc_jobs$`Salary Range To`)
class(nyc_jobs$`Salary Range From`)
nyc_jobs$`Salary Range From`
setwd("~/Desktop/NYCDSA/Week2/")
library(ggplot2)
library(dplyr)
nyc_jobs <- readr::read_csv("./NYC_Jobs.csv")
head(nyc_jobs)
nyc_jobs$`Salary Range From`=as.numeric(nyc_jobs$`Salary Range From`)
nyc_jobs$`Salary Range To`=as.numeric(nyc_jobs$`Salary Range To`)
annual = filter(nyc_jobs,`Salary Frequency` == 'Annual')
hourly = filter(nyc_jobs,`Salary Frequency` == 'Hourly')
daily = filter(nyc_jobs,`Salary Frequency` == 'Daily')
hourly = mutate(hourly,`Salary Range From` = `Salary Range From`*2080, `Salary Range To` = `Salary Range To`*2080)
daily = mutate(daily,`Salary Range From` = `Salary Range From`*260, `Salary Range To` = `Salary Range To`*260)
nyc_jobs = rbind(annual,hourly,daily)
nyc_jobs %>%
group_by(.,Agency) %>%
summarise(.,mean(`Salary Range From`),median(`Salary Range From`),mean(`Salary Range To`),median(`Salary Range To`))
nyc_jobs %>%
group_by(.,Agency) %>%
summarise(.,Mean = mean(`Salary Range From`)) %>%
arrange(.,desc(Mean))
nyc_jobs %>%
group_by(.,Agency) %>%
summarise(.,Mean = mean(`Salary Range From`)) %>%
arrange(.,desc(Mean)) %>%
print(.,1)
nyc_jobs %>%
group_by(.,Agency) %>%
summarise(.,Mean = mean(`Salary Range From`)) %>%
arrange(.,desc(Mean)) %>%
head(.,1)
names(nyc_jobs)
nyc_jobs %>%
mutate(.,range = `Salary Range To`- `Salary Range From`) %>%
group_by(`Posting Type`) %>%
summarise(.,mean(range))
nyc_jobs %>%
mutate(.,range = `Salary Range To`- `Salary Range From`) %>%
group_by(.,Level) %>%
arrange(.,desc(mean(range)))
nyc_jobs %>%
mutate(.,range = `Salary Range To`- `Salary Range From`) %>%
group_by(.,Level) %>%
nyc_jobs %>%
mutate(.,range = `Salary Range To`- `Salary Range From`) %>%
group_by(.,Level) %>%
summarise(.,mean(range)) %>%
arrange(.,desc(mean(range)))
nyc_jobs %>%
mutate(.,range = `Salary Range To`- `Salary Range From`) %>%
group_by(.,Level) %>%
summarise(.,mean(range))
nyc_jobs %>%
mutate(.,range = `Salary Range To`- `Salary Range From`) %>%
group_by(.,Level) %>%
summarise(.,mean(range)) %>%
arrange(.,desc)
nyc_jobs %>%
mutate(.,range = `Salary Range To`- `Salary Range From`) %>%
group_by(.,Level) %>%
summarise(.,Mean = mean(range)) %>%
arrange(.,desc(Mean))
nyc_jobs %>%
mutate(.,range = `Salary Range To`- `Salary Range From`) %>%
arrange(.,desc(range))
nyc_jobs %>%
mutate(.,range = `Salary Range To`- `Salary Range From`) %>%
arrange(.,desc(range)) %>%
head(.,1) %>%
select(.,`Civil Service Title`)
library(ggplot2)
library(dplyr)
subset = select(mpg,V1=year,V2 = cyl,V3 = cty,V4=hwy)
mpg %>%
group_by(.,cyl) %>%
summarise(.,mean(cty),mean(hwy))
max <- mpg %>%
group_by(.,manufacturer) %>%
summarise(.,max(cty))
filter(mpg,cty == max$`max(cty)`)
setwd("~/Desktop/NYCDSA/Week2/")
library(ggplot2)
library(dplyr)
nyc_jobs <- readr::read_csv("./NYC_Jobs.csv")
head(nyc_jobs)
nyc_jobs$`Salary Range From`=as.numeric(nyc_jobs$`Salary Range From`)
nyc_jobs$`Salary Range To`=as.numeric(nyc_jobs$`Salary Range To`)
annual = filter(nyc_jobs,`Salary Frequency` == 'Annual')
hourly = filter(nyc_jobs,`Salary Frequency` == 'Hourly')
daily = filter(nyc_jobs,`Salary Frequency` == 'Daily')
hourly = mutate(hourly,`Salary Range From` = `Salary Range From`*2080, `Salary Range To` = `Salary Range To`*2080)
daily = mutate(daily,`Salary Range From` = `Salary Range From`*260, `Salary Range To` = `Salary Range To`*260)
nyc_jobs = rbind(annual,hourly,daily)
nyc_jobs %>%
group_by(.,Agency) %>%
summarise(.,mean(`Salary Range From`),median(`Salary Range From`),mean(`Salary Range To`),median(`Salary Range To`))
nyc_jobs %>%
group_by(.,Agency) %>%
summarise(.,Mean = mean(`Salary Range From`)) %>%
arrange(.,desc(Mean)) %>%
head(.,1)
nyc_jobs %>%
mutate(.,range = `Salary Range To`- `Salary Range From`) %>%
group_by(`Posting Type`) %>%
summarise(.,mean(range))
nyc_jobs %>%
mutate(.,range = `Salary Range To`- `Salary Range From`) %>%
group_by(.,Level) %>%
summarise(.,Mean = mean(range)) %>%
arrange(.,desc(Mean))
nyc_jobs %>%
group_by(.,Agency) %>%
nyc_jobs %>%
mutate(.,range = `Salary Range To`- `Salary Range From`) %>%
arrange(.,desc(range)) %>%
head(.,1) %>%
select(.,`Civil Service Title`)
library(ggplot2)
library(dplyr)
#a
data(mpg)
#b
subset = select(mpg,V1=year,V2 = cyl,V3 = cty,V4=hwy)
#c
mpg %>%
group_by(.,cyl) %>%
summarise(.,mean(cty),mean(hwy))
#d
max <- mpg %>%
group_by(.,manufacturer) %>%
summarise(.,max(cty))
filter(mpg,cty == max$`max(cty)`)
install.packages('shiny')
shiny::runApp('Desktop/ShinyDemo')
runApp('Desktop/NYCDSA/Week2/flights/flights')
library(shiny)
library(shiny)
function(input,outpu){
}
library(shiny)
fluidPage(
)
runApp('Desktop/flights')
runApp('Desktop/flights')
runApp('Desktop/flights')
runApp('Desktop/flights')
runApp('Desktop/flights')
runApp('Desktop/flights')
runApp('Desktop/NYCDSA/Week2/flights/flights')
install.packages('data.table')
install.packages("data.table")
shiny::runApp('Desktop/flights')
runApp('Desktop/flights')
runApp('Desktop/flights')
shiny::runApp('Desktop/AppStore')
library(xtable)
runApp('Desktop/AppStore')
shiny::runApp('Desktop/AppStore/app')
